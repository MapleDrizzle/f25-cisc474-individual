/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudentRouteImport } from './routes/student'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InstructorRouteImport } from './routes/instructor'
import { Route as AdministratorRouteImport } from './routes/administrator'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DataIndexRouteImport } from './routes/data/index'
import { Route as CourseIndexRouteImport } from './routes/course/index'
import { Route as DataUsersIndexRouteImport } from './routes/data/users/index'
import { Route as DataCoursesIndexRouteImport } from './routes/data/courses/index'
import { Route as CourseCourseIdIndexRouteImport } from './routes/course/$courseId/index'
import { Route as CourseCourseIdAssignmentAssignmentIdRouteImport } from './routes/course/$courseId/assignment/$assignmentId'

const StudentRoute = StudentRouteImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructorRoute = InstructorRouteImport.update({
  id: '/instructor',
  path: '/instructor',
  getParentRoute: () => rootRouteImport,
} as any)
const AdministratorRoute = AdministratorRouteImport.update({
  id: '/administrator',
  path: '/administrator',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataIndexRoute = DataIndexRouteImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseIndexRoute = CourseIndexRouteImport.update({
  id: '/course/',
  path: '/course/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataUsersIndexRoute = DataUsersIndexRouteImport.update({
  id: '/data/users/',
  path: '/data/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const DataCoursesIndexRoute = DataCoursesIndexRouteImport.update({
  id: '/data/courses/',
  path: '/data/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIdIndexRoute = CourseCourseIdIndexRouteImport.update({
  id: '/course/$courseId/',
  path: '/course/$courseId/',
  getParentRoute: () => rootRouteImport,
} as any)
const CourseCourseIdAssignmentAssignmentIdRoute =
  CourseCourseIdAssignmentAssignmentIdRouteImport.update({
    id: '/course/$courseId/assignment/$assignmentId',
    path: '/course/$courseId/assignment/$assignmentId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/administrator': typeof AdministratorRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/student': typeof StudentRoute
  '/course': typeof CourseIndexRoute
  '/data': typeof DataIndexRoute
  '/course/$courseId': typeof CourseCourseIdIndexRoute
  '/data/courses': typeof DataCoursesIndexRoute
  '/data/users': typeof DataUsersIndexRoute
  '/course/$courseId/assignment/$assignmentId': typeof CourseCourseIdAssignmentAssignmentIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/administrator': typeof AdministratorRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/student': typeof StudentRoute
  '/course': typeof CourseIndexRoute
  '/data': typeof DataIndexRoute
  '/course/$courseId': typeof CourseCourseIdIndexRoute
  '/data/courses': typeof DataCoursesIndexRoute
  '/data/users': typeof DataUsersIndexRoute
  '/course/$courseId/assignment/$assignmentId': typeof CourseCourseIdAssignmentAssignmentIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/administrator': typeof AdministratorRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/student': typeof StudentRoute
  '/course/': typeof CourseIndexRoute
  '/data/': typeof DataIndexRoute
  '/course/$courseId/': typeof CourseCourseIdIndexRoute
  '/data/courses/': typeof DataCoursesIndexRoute
  '/data/users/': typeof DataUsersIndexRoute
  '/course/$courseId/assignment/$assignmentId': typeof CourseCourseIdAssignmentAssignmentIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/administrator'
    | '/instructor'
    | '/login'
    | '/student'
    | '/course'
    | '/data'
    | '/course/$courseId'
    | '/data/courses'
    | '/data/users'
    | '/course/$courseId/assignment/$assignmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/administrator'
    | '/instructor'
    | '/login'
    | '/student'
    | '/course'
    | '/data'
    | '/course/$courseId'
    | '/data/courses'
    | '/data/users'
    | '/course/$courseId/assignment/$assignmentId'
  id:
    | '__root__'
    | '/'
    | '/administrator'
    | '/instructor'
    | '/login'
    | '/student'
    | '/course/'
    | '/data/'
    | '/course/$courseId/'
    | '/data/courses/'
    | '/data/users/'
    | '/course/$courseId/assignment/$assignmentId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdministratorRoute: typeof AdministratorRoute
  InstructorRoute: typeof InstructorRoute
  LoginRoute: typeof LoginRoute
  StudentRoute: typeof StudentRoute
  CourseIndexRoute: typeof CourseIndexRoute
  DataIndexRoute: typeof DataIndexRoute
  CourseCourseIdIndexRoute: typeof CourseCourseIdIndexRoute
  DataCoursesIndexRoute: typeof DataCoursesIndexRoute
  DataUsersIndexRoute: typeof DataUsersIndexRoute
  CourseCourseIdAssignmentAssignmentIdRoute: typeof CourseCourseIdAssignmentAssignmentIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/student': {
      id: '/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof StudentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor': {
      id: '/instructor'
      path: '/instructor'
      fullPath: '/instructor'
      preLoaderRoute: typeof InstructorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/administrator': {
      id: '/administrator'
      path: '/administrator'
      fullPath: '/administrator'
      preLoaderRoute: typeof AdministratorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/': {
      id: '/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/': {
      id: '/course/'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof CourseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/users/': {
      id: '/data/users/'
      path: '/data/users'
      fullPath: '/data/users'
      preLoaderRoute: typeof DataUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/courses/': {
      id: '/data/courses/'
      path: '/data/courses'
      fullPath: '/data/courses'
      preLoaderRoute: typeof DataCoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/': {
      id: '/course/$courseId/'
      path: '/course/$courseId'
      fullPath: '/course/$courseId'
      preLoaderRoute: typeof CourseCourseIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/course/$courseId/assignment/$assignmentId': {
      id: '/course/$courseId/assignment/$assignmentId'
      path: '/course/$courseId/assignment/$assignmentId'
      fullPath: '/course/$courseId/assignment/$assignmentId'
      preLoaderRoute: typeof CourseCourseIdAssignmentAssignmentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdministratorRoute: AdministratorRoute,
  InstructorRoute: InstructorRoute,
  LoginRoute: LoginRoute,
  StudentRoute: StudentRoute,
  CourseIndexRoute: CourseIndexRoute,
  DataIndexRoute: DataIndexRoute,
  CourseCourseIdIndexRoute: CourseCourseIdIndexRoute,
  DataCoursesIndexRoute: DataCoursesIndexRoute,
  DataUsersIndexRoute: DataUsersIndexRoute,
  CourseCourseIdAssignmentAssignmentIdRoute:
    CourseCourseIdAssignmentAssignmentIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
